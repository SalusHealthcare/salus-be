type Query {
    allPeople(page: Int!, size: Int!, sort: PersonSort): [Person]
    peopleCount: Int
    person(personId: ID!): Person
    allTeams(page: Int!, size: Int!, sort: TeamSort): [Team]
    teamCount: Int
    team(teamId: ID!): Team
    currentUser: User
}

type Mutation {
    createUser(userInfo: CreateUserInput!, personInfo: CreatePersonInput!): User
    updatePassword(input: UpdatePasswordInput!): User
    updatePerson(input: UpdatePersonInput!): Person
    createTeam(name: String!): Team
    login(email: String!, password: String!): User
    joinTeam(teamId: ID!): Team
    leaveTeam(teamId: ID!): Team
    deleteUser(personId: ID!): Boolean
    deleteTeam(teamId: ID!): Boolean
    approveTeamMember(teamId: ID!, personId: ID!): Team
    replaceTeamLeader(teamId: ID!, personId: ID!): Team
    promotePerson(personId: ID!): Person
    unpromotePerson(personId: ID!): Person
}

type Person {
    id: ID
    firstName: String
    lastName: String
    email: String
    title: String
    birthDate: Date
    telephoneNumber: String
    roles: [String]
    teams(withUnapproved: Boolean): [TeamMember]
    teamCount: Int
}

type User {
    token: String
    person: Person
}

type Team {
    id: ID
    name: String
    leader: Person
    members(withUnapproved: Boolean): [TeamMember]
    memberCount(withUnapproved: Boolean): Int
    isLeader: Boolean
    isMember: Boolean
}

type TeamMember {
    person: Person
    approved: Boolean
}

type Duration {
    toHours: Int
    toMinutes: Int
    toSeconds: Int
}

type Date {
    formatString(format: String!): String
    iso: String
}

enum PersonSortField {
    LAST_NAME
    BIRTH_DATE
}

enum TeamSortField {
    NAME
}

enum Order {
    ASC
    DESC
}

input CreateUserInput {
    email: String!
    password: String!
}

input CreatePersonInput {
    firstName: String
    lastName: String
    birthDate: String
    telephoneNumber: String
    title: String
}

input PersonSort {
    field: PersonSortField
    order: Order
}

input TeamSort {
    field: TeamSortField
    order: Order
}

input UpdatePersonInput {
    firstName: String
    lastName: String
    birthDate: String
    telephoneNumber: String
    title: String
}

input UpdatePasswordInput {
    originalPassword: String!
    newPassword: String!
}

scalar Upload
